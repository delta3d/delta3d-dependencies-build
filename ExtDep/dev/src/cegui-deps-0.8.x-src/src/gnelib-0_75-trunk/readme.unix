Linux(Unix) specific information for GNE.

1. Dependencies

General requirements are GCC version 3.x or higher with a modern libstdc++.
make is also required.  GCC version 4.0.3 was tested with GNE.

In Debian-based distributions, package `build-essential` gives you what you
need. (apt-get install build-essential)

GCC 2.9x was recently supported but is deprecated and has not been tested
since GNE 0.70.

1.1 ncurses

GNE uses the ncurses library.  GNE has been tested with libncurses5 and 6.
Others may or may not work.  In all of the distributions I've used,
libncurses-dev comes with it which installs everything you need.

1.2 HawkNL

Install HawkNL. HawkNL has its own installation process, which does involve
a makefile. GNE is compatible with HawkNL 1.68 or the CMake build-based branch
of HawkNL that generates libhawknl.so. The CMake build will look for both
libNL.so and libhawknl.so.

Alternatively, you can use the new CMake build-based distribution from
Jason Winnebeck. You can build HawkNL separately in this case and install it,
and in UNIX-like systems CMake will detect it when compiling GNE. You can
also "embed" HawkNL to build with GNE by placing its source into a folder
called "hawknl" under GNE's root. If HawkNL is not detected in the traditional
manner, then GNE will compile hawknl found in this directory and use that.
When installing GNE, HawkNL's libraries will come alongside GNE's in the "lib"
directory.

1.3 Boost

Install Boost, version 1.32 or later.  GNE does not make use of any of the
compiled parts of Boost, so no compilation is needed.  On Debian-based
systems, libboost-dev will work just fine, which you can install via:

sudo aptitude install libboost-dev

1.4 CMake

GNE requires CMake 2.4 or later for its build process.  This is included as
package "cmake" in Debian-based distributions. Ubuntu 8.04 LTS and Debian
stable branches both have CMake >= 2.4 at the time of writing. Therefore,
on these systems you may run `sudo aptitude install cmake`.

You may want to install a direct copy of CMake if:

 * Your distribution does not include CMake 2.4 or later
 * You cannot install software on your machine
 * You have an older version of cmake installed that you don't want to
   interfere with.

Installing CMake is VERY easy! Just head to the download page and get the
latest version (2.4.3 at the time of writing):

http://www.cmake.org/HTML/Download.html

The binary builds only require libc, so it should run on just about any
machine out there.  It requires no "installation".  For example if you are
running Intel i386 on Linux:

mkdir $HOME/cmake-2.4.3
cd $HOME/cmake-2.4.3
wget http://www.cmake.org/files/v2.4/cmake-2.4.3-Linux-i386.tar.gz
tar xzvf cmake-2.4.3-Linux-i386.tar.gz
rm cmake-2.4.3-Linux-i386.tar.gz
mv cmake-2.4.3-Linux-i386/* .
rmdir cmake-2.4.3-Linux-i386/

And you are done.  When you follow the build instructions for GNE, instead of
"cmake .." you will say "$HOME/cmake-2.4.3/bin/cmake .."  Once you start the
cmake process and run "make", the paths will be "sticky".

1.5 Doxygen

Doxygen is an OPTIONAL dependency.  Any version from the last couple of years
should work fine.  Package 'doxygen' should be sufficient.  The build system
will detect if Doxygen is installed, and if so, documentation will be
generated by default in the build process.

1.6 Dot

The dot tool from the graphvis package is an OPTIONAL dependecny. If it is
detected and doxygen is detected and documentation is configured to be built,
dot will be used.

2. Building and Installation

If you did not install some library into your compiler's default search
paths, you need to let cmake know where to find libraries like HawkNL. As an
example, a user who is not an administrator on the machine compiled HawkNL
but cannot install it to /usr/include and /usr/lib. By setting the environment
variables CMAKE_INCLUDE_PATH and CMAKE_LIBRARY_PATH, s/he can have CMake
additionally search those directories for headers and libraries.

For example:
export CMAKE_INCLUDE_PATH="$HOME/include/"
export CMAKE_LIBRARY_PATH="$HOME/lib/"

In a shell running in the GNE source code directory, execute:

mkdir build
cd build
cmake ..

This will set up the build environment, and configure it based on your system.
If a library was not found, or you want to tweak specific settings, you can
run `ccmake ..` to get an interactive tool to change parameters such as
compiler flags or examples compilation.

If you want to build to the default settings, just run:

make

To compile the library and examples. Then if you are an administrator, you can
install the library:

sudo make install

To install GNE into the following locations:

/usr/local/lib/libgnelib.a
/usr/local/include/gnelib.h
/usr/local/include/gnelib/*.h
/usr/local/share/libgnelib-dev/examples/*
/usr/local/share/libgnelib-dev/docs/*

If you wish to pick a different install prefix, please use ccmake to change
CMAKE_INSTALL_PREFIX. You can also prepend the above paths with DESTDIR as
shown below. You will need to pick a different prefix if your account is not
able to install to /usr/local. An example is below:

make install DESTDIR="$HOME/gnelib"

The final path will be $DESTDIR/$CMAKE_INSTALL_PREFIX

Currently there is no uninstall functionality provided, but this may be
corrected in a future version.  For the moment you could manually delete the
files and paths denoted above.

rm /usr/local/lib/libgnelib.a
rm /usr/local/include/gnelib.h
rm -r /usr/local/include/gnelib
rm -r /usr/local/share/libgnelib-dev

3. Documentation

Documentation is automatically built by default if doxygen is detected, and
is placed in share/libgnelib-dev/docs.

You can also download the documentation, beginner's guide, and GNE tutorials
from the GNE website, if you do not have or do not wish to install doxygen
and/or DOT.

4. Examples

Examples are not compiled by default.  If you wish to compile all included
example programs, use ccmake to set building of examples to ON.

Examples will be installed in share/libgnelib-dev/examples.
