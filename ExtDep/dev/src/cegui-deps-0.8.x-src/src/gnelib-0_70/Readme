                                    README

GNE 0.70
Game Networking Engine
http://www.rit.edu/~jpw9607/gne/

  Visit the site to get up-to-date links to things you need for GNE.

  GNE is released under the terms of the LGPL.  It is a library for providing
networking for games.  The file "License" contains the full text of the LGPL.

To learn more about what GNE will do visit:
http://www.rit.edu/~jpw9607/gne/gnereq.htm

The documentation for GNE is generated by a program called doxygen, which
generates HTML from specially designed comments in the source code.  This
documentation also includes a beginner's guide.  You can find doxygen at:

http://www.stack.nl/~dimitri/doxygen/index.html

The documentation can also be viewed online at the GNE website if you do
not wish to install doxygen.

The other readme files in this directory contain specific instructions for
your compiler.


Dependancies

The following things are needed for GNE:

  * ISO compliant C++ compiler
    + Out-of-the-Box for 
      - Windows: MSVC 6, MSVC.NET, MingW.
      - Linux: gcc 2.9x, 3.x.
      - Solaris: gcc 2.9x, 3.x using the GNU tools.
    + MSVC 4 or 5 might also work, and other *NIX as well, but testers are
      needed for this!  You may need to define OLD_CPP to use these versions.
  * The HawkNL networking library from HawkSoft, version 1.5, 1.6 or higher.
    Versions 1.5, 1.6beta4, and 1.6 final have been specifically tested.
    Version 1.6beta4 does not work in Linux, and 1.6betas 1, 2, and 3 don't
    work at all for GNE.
    GNE comes with a precompiled version in the package for the following
    platforms (for others like Linux you must compile HawkNL yourself):
    + MSVC6
    + MSVC.NET
    + mingw 1.0 (GCC 2.95.3-6)
    The source version of HawkNL can be found at http://www.hawksoft.com/
  * pthreads implementation when running in UNIX (installed by default on all
    UNIX operating systems I've used).
  * A curses implementation such as ncurses will be needed to use GNE under
    a UNIX platform (also normally installed by default).

Missing Features

* Thread priorities have not been implemented in UNIX because I haven't been
  able to figure how how to do this portably with pthreads yet -- if you know
  how, feel free to speak up ;).  They do work in Windows, however.

* Throwing exceptions in the readPacket and maybe the writePacket methods
  will be allowed and caught to signal the caller that parsing of the packet
  cannot be completed.  Not having this functionality is not very bad right
  now as TCP and UDP protocols guarantee that data inside of packets is
  always sent correctly if it arrives, therefore readPacket should only fail
  due to a programming error.  For now it is advised that you use asserts to
  check for this problem.
